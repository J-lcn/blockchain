/* Automatically generated nanopb header */
/* Generated by nanopb-0.4.8-dev */

#ifndef PB_TXREQUEST_PB_H_INCLUDED
#define PB_TXREQUEST_PB_H_INCLUDED
#include <pb.h>

#if PB_PROTO_HEADER_VERSION != 40
#error Regenerate this file with the current version of nanopb generator.
#endif

/* Enum definitions */
typedef enum _TxType {
    TxType_INVOKE_CONTRACT = 0,
    TxType_QUERY_CONTRACT = 1,
    TxType_SUBSCRIBE = 2,
    TxType_ARCHIVE = 3
} TxType;

typedef enum _MemberType {
    MemberType_CERT = 0,
    MemberType_CERT_HASH = 1,
    MemberType_PUBLIC_KEY = 2,
    MemberType_DID = 3,
    MemberType_ALIAS = 4,
    MemberType_ADDR = 5
} MemberType;

/* Struct definitions */
typedef PB_BYTES_ARRAY_T(32) KeyValuePair_value_t;
typedef struct _KeyValuePair {
    char key[10];
    KeyValuePair_value_t value;
} KeyValuePair;

typedef struct _Limit {
    /* gas limit */
    uint64_t gas_limit;
} Limit;

typedef struct _Payload {
    /* blockchain identifier */
    char chain_id[10];
    /* transaction type */
    TxType tx_type;
    /* transaction id set by sender, should be unique */
    char tx_id[33];
    /* transaction timestamp, in unix timestamp format, seconds */
    int64_t timestamp;
    /* expiration timestamp in unix timestamp format
 after that the transaction is invalid if it is not included in block yet */
    int64_t expiration_time;
    /* smart contract name */
    char contract_name[10];
    /* invoke method */
    char method[10];
    /* invoke parameters in k-v format */
    pb_size_t parameters_count;
    KeyValuePair parameters[3];
    /* sequence number, default is 0 */
    uint64_t sequence;
    /* transaction limitation */
    bool has_limit;
    Limit limit;
} Payload;

typedef PB_BYTES_ARRAY_T(32) Member_member_info_t;
typedef struct _Member {
    /* organization identifier of the member */
    char org_id[10];
    /* member type */
    MemberType member_type;
    /* member identity related info bytes */
    Member_member_info_t member_info;
} Member;

typedef PB_BYTES_ARRAY_T(80) EndorsementEntry_signature_t;
typedef struct _EndorsementEntry {
    /* signer */
    bool has_signer;
    Member signer;
    /* signature */
    EndorsementEntry_signature_t signature;
} EndorsementEntry;

typedef struct _TxRequest {
    /* payload */
    bool has_payload;
    Payload payload;
    /* sender account and sender's signature */
    bool has_sender;
    EndorsementEntry sender;
    /* endorsers account and signatures */
    pb_size_t endorsers_count;
    EndorsementEntry endorsers[3];
    /* payer account and signature */
    bool has_payer;
    EndorsementEntry payer;
} TxRequest;


#ifdef __cplusplus
extern "C" {
#endif

/* Helper constants for enums */
#define _TxType_MIN TxType_INVOKE_CONTRACT
#define _TxType_MAX TxType_ARCHIVE
#define _TxType_ARRAYSIZE ((TxType)(TxType_ARCHIVE+1))

#define _MemberType_MIN MemberType_CERT
#define _MemberType_MAX MemberType_ADDR
#define _MemberType_ARRAYSIZE ((MemberType)(MemberType_ADDR+1))


#define Payload_tx_type_ENUMTYPE TxType




#define Member_member_type_ENUMTYPE MemberType


/* Initializer values for message structs */
#define TxRequest_init_default                   {false, Payload_init_default, false, EndorsementEntry_init_default, 0, {EndorsementEntry_init_default, EndorsementEntry_init_default, EndorsementEntry_init_default}, false, EndorsementEntry_init_default}
#define Payload_init_default                     {"", _TxType_MIN, "", 0, 0, "", "", 0, {KeyValuePair_init_default, KeyValuePair_init_default, KeyValuePair_init_default}, 0, false, Limit_init_default}
#define KeyValuePair_init_default                {"", {0, {0}}}
#define Limit_init_default                       {0}
#define EndorsementEntry_init_default            {false, Member_init_default, {0, {0}}}
#define Member_init_default                      {"", _MemberType_MIN, {0, {0}}}
#define TxRequest_init_zero                      {false, Payload_init_zero, false, EndorsementEntry_init_zero, 0, {EndorsementEntry_init_zero, EndorsementEntry_init_zero, EndorsementEntry_init_zero}, false, EndorsementEntry_init_zero}
#define Payload_init_zero                        {"", _TxType_MIN, "", 0, 0, "", "", 0, {KeyValuePair_init_zero, KeyValuePair_init_zero, KeyValuePair_init_zero}, 0, false, Limit_init_zero}
#define KeyValuePair_init_zero                   {"", {0, {0}}}
#define Limit_init_zero                          {0}
#define EndorsementEntry_init_zero               {false, Member_init_zero, {0, {0}}}
#define Member_init_zero                         {"", _MemberType_MIN, {0, {0}}}

/* Field tags (for use in manual encoding/decoding) */
#define KeyValuePair_key_tag                     1
#define KeyValuePair_value_tag                   2
#define Limit_gas_limit_tag                      1
#define Payload_chain_id_tag                     1
#define Payload_tx_type_tag                      2
#define Payload_tx_id_tag                        3
#define Payload_timestamp_tag                    4
#define Payload_expiration_time_tag              5
#define Payload_contract_name_tag                6
#define Payload_method_tag                       7
#define Payload_parameters_tag                   8
#define Payload_sequence_tag                     9
#define Payload_limit_tag                        10
#define Member_org_id_tag                        1
#define Member_member_type_tag                   2
#define Member_member_info_tag                   3
#define EndorsementEntry_signer_tag              1
#define EndorsementEntry_signature_tag           2
#define TxRequest_payload_tag                    1
#define TxRequest_sender_tag                     2
#define TxRequest_endorsers_tag                  3
#define TxRequest_payer_tag                      4

/* Struct field encoding specification for nanopb */
#define TxRequest_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, MESSAGE,  payload,           1) \
X(a, STATIC,   OPTIONAL, MESSAGE,  sender,            2) \
X(a, STATIC,   REPEATED, MESSAGE,  endorsers,         3) \
X(a, STATIC,   OPTIONAL, MESSAGE,  payer,             4)
#define TxRequest_CALLBACK NULL
#define TxRequest_DEFAULT NULL
#define TxRequest_payload_MSGTYPE Payload
#define TxRequest_sender_MSGTYPE EndorsementEntry
#define TxRequest_endorsers_MSGTYPE EndorsementEntry
#define TxRequest_payer_MSGTYPE EndorsementEntry

#define Payload_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, STRING,   chain_id,          1) \
X(a, STATIC,   SINGULAR, UENUM,    tx_type,           2) \
X(a, STATIC,   SINGULAR, STRING,   tx_id,             3) \
X(a, STATIC,   SINGULAR, INT64,    timestamp,         4) \
X(a, STATIC,   SINGULAR, INT64,    expiration_time,   5) \
X(a, STATIC,   SINGULAR, STRING,   contract_name,     6) \
X(a, STATIC,   SINGULAR, STRING,   method,            7) \
X(a, STATIC,   REPEATED, MESSAGE,  parameters,        8) \
X(a, STATIC,   SINGULAR, UINT64,   sequence,          9) \
X(a, STATIC,   OPTIONAL, MESSAGE,  limit,            10)
#define Payload_CALLBACK NULL
#define Payload_DEFAULT NULL
#define Payload_parameters_MSGTYPE KeyValuePair
#define Payload_limit_MSGTYPE Limit

#define KeyValuePair_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, STRING,   key,               1) \
X(a, STATIC,   SINGULAR, BYTES,    value,             2)
#define KeyValuePair_CALLBACK NULL
#define KeyValuePair_DEFAULT NULL

#define Limit_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, UINT64,   gas_limit,         1)
#define Limit_CALLBACK NULL
#define Limit_DEFAULT NULL

#define EndorsementEntry_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, MESSAGE,  signer,            1) \
X(a, STATIC,   SINGULAR, BYTES,    signature,         2)
#define EndorsementEntry_CALLBACK NULL
#define EndorsementEntry_DEFAULT NULL
#define EndorsementEntry_signer_MSGTYPE Member

#define Member_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, STRING,   org_id,            1) \
X(a, STATIC,   SINGULAR, UENUM,    member_type,       2) \
X(a, STATIC,   SINGULAR, BYTES,    member_info,       3)
#define Member_CALLBACK NULL
#define Member_DEFAULT NULL

extern const pb_msgdesc_t TxRequest_msg;
extern const pb_msgdesc_t Payload_msg;
extern const pb_msgdesc_t KeyValuePair_msg;
extern const pb_msgdesc_t Limit_msg;
extern const pb_msgdesc_t EndorsementEntry_msg;
extern const pb_msgdesc_t Member_msg;

/* Defines for backwards compatibility with code written before nanopb-0.4.0 */
#define TxRequest_fields &TxRequest_msg
#define Payload_fields &Payload_msg
#define KeyValuePair_fields &KeyValuePair_msg
#define Limit_fields &Limit_msg
#define EndorsementEntry_fields &EndorsementEntry_msg
#define Member_fields &Member_msg

/* Maximum encoded size of messages (where known) */
#define EndorsementEntry_size                    131
#define KeyValuePair_size                        45
#define Limit_size                               11
#define Member_size                              47
#define Payload_size                             256
#define TXREQUEST_PB_H_MAX_SIZE                  TxRequest_size
#define TxRequest_size                           929

#ifdef __cplusplus
} /* extern "C" */
#endif

#endif
